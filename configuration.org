#+title: Emacs configuration
#+author: Nick

* Early init
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "early-init.el" user-emacs-directory)
:END:

#+begin_src emacs-lisp
  ;;; early-init.el --- Early init file -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:

  (setq package-enable-at-startup nil)
#+end_src
* Startup performance
#+begin_src emacs-lpisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun nb/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'nb/display-startup-time)
#+end_src

* Basic UI tweaks
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq visible-bell 1)
  (setq ring-bell-function 'ignore)
  (global-display-line-numbers-mode)
#+end_src

** UTF-8
#+begin_src emacs-lisp
  (setopt default-process-coding-system '(utf-8-unix . utf-8-unix)
        locale-coding-system 'utf-8)

  (set-charset-priority 'unicode)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

* Modeline
#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (moody-replace-eldoc-minibuffer-message-function))
#+end_src
* Theme
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :ensure t
    :config
    (load-theme 'catppuccin)
    (setq catppuccin-flavor 'frappe) ;; or 'latte, 'macchiato, 'frappe or 'mocha
    (catppuccin-reload))
#+end_src
* Formatting
  #+begin_src emacs-lisp
    (use-package apheleia
      :ensure t
      :config
      (apheleia-global-mode))
#+end_src
* Text editing
** Delimiter pairs
  #+begin_src emacs_lisp
(electric-pair-mode t)
#+end_src
** Mac OS
   #+begin_src emacs-lisp
(defconst VS/IS-MACOS (eq system-type 'darwin))

(when NB/IS-MACOS
  (setopt mac-command-modifier 'meta
	  mac-option-modifier 'hyper))
#+end_src
** Avy
   #+begin_src emacs-lisp
     (use-package avy
       :ensure t
       :config
       (global-set-key (kbd "C-;") 'avy-goto-char))
#+end_src
* Org mode
** Org modern
#+begin_src emacs-lisp
  (use-package org-modern
  :ensure t
  :init
  ;; Add frame borders and window dividers
  ;;
  ;; WJH 2023-12-05: These are necessary in order to be able to see the
  ;; indicators for source blocks.  On the other hand, I do not want
  ;; them as large as in the examples (40 pixels!), so I am using 4
  ;; instead
  (modify-all-frames-parameters
   '((right-divider-width . 4)
     (internal-border-width . 4)))
  ;; Make things blend in
  (dolist (face '(window-divider
		  window-divider-first-pixel
		  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  :config
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   org-startup-folded t
   
   ;; Org styling
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"
   org-adapt-indentation t

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "◀── now ─────────────────────────────────────────────────")

  (global-org-modern-mode)
  )
#+end_src
* Search
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  (setq vertico-count 20)
  (setq vertico-cycle t))
#+end_src
** Orderless
   #+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion))))
#+end_src
** Project search
#+begin_src emacs-lisp
(setf epa-pinentry-mode 'loopback)
#+end_src
** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
(use-package consult
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
))
#+end_src
* Programming Languages
** Nix
   #+begin_src emacs-lisp
     (use-package nix-mode
       :ensure t
       :mode "\\.nix\\'")
#+end_src
** Elixir
   #+begin_src emacs-lisp
     (use-package elixir-mode
       :ensure t)

     (use-package elixir-ts-mode
       :defer t
       :hook (elixir-ts-mode . (lambda () (tempo-use-tag-list 'elixir-tempo-tags)))
       :bind (:map elixir-ts-mode-map
		   ("C-c C-c f" . elixir-format-buffer)
		   ("C-c C-c M" . vs/elixir-map-string-to-map-atom)
		   ("C-c C-c m" . vs/elixir-map-atom-to-map-string)
		   ("C-c C-c J" . vs/etf-to-json)
		   ("C-c C-c j" . vs/json-to-etf)
		   ("C-c C-c D" . vs/elixir-open-dep-docs)
		   ("C-c C-c z" . run-elixir-project))
       :config
       ;; reformatter
       (reformatter-define elixir-format
	 :program "mix"

       ;; add major mode remap alist
       (add-to-list 'major-mode-remap-alist
		    '(elixir-mode . elixir-ts-mode))))

     (use-package exunit
       :config
       ;; fix broken dark test link
       (custom-set-faces
	'(ansi-color-black ((t (:background "MediumPurple2" :foreground "MediumPurple2")))))
       :hook
       (elixir-ts-mode . exunit-mode)
       (elixir-mode . exunit-mode))

     (defun nick/enter-pipe ()
       (interactive)
       (let ((oldpos (point)))
	 (end-of-line)
	 (newline-and-indent)
	 (insert "|> ")))
#+end_src
* Git
  Latest seq for transient (with workaround due to a bug on elpaca)
  #+begin_src emacs-lisp
(defun +elpaca-unload-seq (e)
  (and (featurep 'seq) (unload-feature 'seq t))
  (elpaca--continue-build e))

;; You could embed this code directly in the reicpe, I just abstracted it into a function.
(defun +elpaca-seq-build-steps ()
  (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
                       elpaca--pre-built-steps elpaca-build-steps))
          (list '+elpaca-unload-seq 'elpaca--activate-package)))

(use-package seq :ensure `(seq :build ,(+elpaca-seq-build-steps)))
  #+end_src

Latest transient (bug elpaca)
  #+begin_src emacs-lisp
(use-package transient)
#+end_src

Latest transient (bug elpaca)
  #+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+end_src
* Which key
  #+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer 10
    :diminish which-key-mode
    :config
    (which-key-mode 1))
#+end_src
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
	(define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
	(setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	      treemacs-deferred-git-apply-delay        0.5
	      treemacs-directory-name-transformer      #'identity
	      treemacs-display-in-side-window          t
	      treemacs-eldoc-display                   'simple
	      treemacs-file-event-delay                2000
	      treemacs-file-extension-regex            treemacs-last-period-regex-value
	      treemacs-file-follow-delay               0.2
	      treemacs-file-name-transformer           #'identity
	      treemacs-follow-after-init               t
	      treemacs-expand-after-init               t
	      treemacs-find-workspace-method           'find-for-file-or-pick-first
	      treemacs-git-command-pipe                ""
	      treemacs-goto-tag-strategy               'refetch-index
	      treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	      treemacs-hide-dot-git-directory          t
	      treemacs-indentation                     2
	      treemacs-indentation-string              " "
	      treemacs-is-never-other-window           nil
	      treemacs-max-git-entries                 5000
	      treemacs-missing-project-action          'ask
	      treemacs-move-files-by-mouse-dragging    t
	      treemacs-move-forward-on-expand          nil
	      treemacs-no-png-images                   nil
	      treemacs-no-delete-other-windows         t
	      treemacs-project-follow-cleanup          nil
	      treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	      treemacs-position                        'left
	      treemacs-read-string-input               'from-child-frame
	      treemacs-recenter-distance               0.1
	      treemacs-recenter-after-file-follow      nil
	      treemacs-recenter-after-tag-follow       nil
	      treemacs-recenter-after-project-jump     'always
	      treemacs-recenter-after-project-expand   'on-distance
	      treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	      treemacs-project-follow-into-home        nil
	      treemacs-show-cursor                     nil
	      treemacs-show-hidden-files               t
	      treemacs-silent-filewatch                nil
	      treemacs-silent-refresh                  nil
	      treemacs-sorting                         'alphabetic-asc
	      treemacs-select-when-already-in-treemacs 'move-back
	      treemacs-space-between-root-nodes        t
	      treemacs-tag-follow-cleanup              t
	      treemacs-tag-follow-delay                1.5
	      treemacs-text-scale                      nil
	      treemacs-user-mode-line-format           nil
	      treemacs-user-header-line-format         nil
	      treemacs-wide-toggle-width               70
	      treemacs-width                           35
	      treemacs-width-increment                 1
	      treemacs-width-is-initially-locked       t
	      treemacs-workspace-switch-cleanup        nil)

	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)

	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode 'always)
	(when treemacs-python-executable
	  (treemacs-git-commit-diff-mode t))

	(pcase (cons (not (null (executable-find "git")))
		     (not (null treemacs-python-executable)))
	  (`(t . t)
	   (treemacs-git-mode 'deferred))
	  (`(t . _)
	   (treemacs-git-mode 'simple)))

	(treemacs-hide-gitignored-files-mode nil))
      :bind
      (:map global-map
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t d"   . treemacs-select-directory)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once)
      :ensure t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t)

    (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
      :after (treemacs persp-mode) ;;or perspective vs. persp-mode
      :ensure t
      :config (treemacs-set-scope-type 'Perspectives))

    (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
      :after (treemacs)
      :ensure t
      :config (treemacs-set-scope-type 'Tabs))
#+end_src
* Dashboard
  #+begin_src emacs-lisp
(use-package dashboard
  :custom
  (dashboard-projects-backend 'project-el)
  (dashboard-items '((recents  . 5)
                     (projects . 5)
                     (bookmarks . 5)
                     (agenda . 5)))
  (dashboard-startup-banner 'logo)
  (dashboard-center-content t)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  :config
  (dashboard-setup-startup-hook))
#+end_src
* Vterm
  #+begin_src emacs-lisp
(use-package vterm)
#+end_src
* Switch Window
#+begin_src emacs-lisp
  (use-package switch-window
    :bind ("C-x o" . switch-window))
#+end_src
* LSP
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :hook ((elixir-mode . lsp)
	     (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred))

    ;; optionally
    (use-package lsp-ui :commands lsp-ui-mode)
    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

    ;; optionally if you want to use debugger
    ;; (use-package dap-mode)
    ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src
* General (Keybindings)
  #+begin_src emacs-lisp
    (use-package general
      :ensure t
      :config

      (defvar-keymap prefix-buffer-map
	:doc "Prefix key map for buffers."
	"i" 'ibuffer
	"d"  'kill-current-buffer
	"b"  'consult-project-buffer
	"B"  'consult-buffer
	"p"  'Previous-buffer)

      (defvar-keymap prefix-window-map
	:doc "Prefix key map for windows."
	"c" 'split-window-right
	"n" 'split-window-below
	"d" 'delete-window
	"o" 'ace-window)

      (defvar-keymap prefix-project-map
	:doc "Prefix key map for projects."
	"p" 'project-switch-project
	"f" 'project-find-file
	"s" 'conult-grep)

      (defvar-keymap prefix-search-map
	:doc "Prefix key map for searching."
	"p" 'consult-grep
	"b" 'consult-line)

      (defvar-keymap prefix-open-map
	:doc "Prefix key map for opening things."
	"t" 'vterm
	"p" 'treemacs)

      (defvar-keymap prefix-map
	:doc "My prefix key map."
	"b" prefix-buffer-map
	"w" prefix-window-map
	"p" prefix-project-map
	"o" prefix-open-map
	"s" prefix-search-map)

      (which-key-add-keymap-based-replacements prefix-map
	"b" `("Buffer" . ,prefix-buffer-map)
	"w" `("Window" . ,prefix-window-map)
	"p" `("Project" . ,prefix-project-map)
	"o" `("Open" . ,prefix-open-map)
	"s" `("Search" . ,prefix-search-map))

      (keymap-set global-map "C-." prefix-map)
      )
#+end_src

